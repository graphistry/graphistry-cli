Telemetry
The Graphistry services can export telemetry information using the OpenTelemetry standard.
The telemetry information will be collected by the OTEL Collector service and from there it will be dispatched to any observability tool that is compatible with OpenTelemetry (e.g. Prometheus, Jaeger, Grafana Cloud, etc.).

Configuration



# Telemetry

The Graphistry services can export telemetry information using the [OpenTelemetry](https://opentelemetry.io/) standard.
The telemetry information will be collected by the [OTEL Collector](https://opentelemetry.io/docs/collector/) service and from there it will be dispatched to any observability tool that is compatible with OpenTelemetry (e.g. Prometheus, Jaeger, Grafana Cloud, etc.).

## Configuration
By default the instrumented code will not export telemetry data. If we want to enable OpenTelemetry, we need to define the custom environment variable ENABLE_OPEN_TELEMETRY in the configuration file: `$GRAPHISTRY_HOME/data/config/telemetry.env`

This is the configuration template for Grafana Cloud:

```bash
ENABLE_OPEN_TELEMETRY=true

OTEL_COLLECTOR_OTLP_USERNAME="XYZ"   # e.g. Grafana Cloud Instance ID for OTLP
OTEL_COLLECTOR_OTLP_PASSWORD="PQR"   # e.g. Grafana Cloud API Token for OTLP
OTEL_COLLECTOR_OTLP_HTTP_ENDPOINT="https://hostname.grafana.net/otlp"   # e.g. Grafana OTLP HTTP endpoint 
OTEL_COLLECTOR_COMPOSE_FILE=otel-collector.yml
OTEL_COLLECTOR_CONF_FILE=./etc/otel-collector/otel-collector-config.yml
```

And this is the configuration template for a local development env (this start Jaeger and Prometheus containers along with the OpenTelemetry Collector service):

```bash
ENABLE_OPEN_TELEMETRY=true

OTEL_COLLECTOR_OTLP_HTTP_ENDPOINT="https://hostname.grafana.net/otlp"   # e.g. Grafana OTLP HTTP endpoint 
OTEL_COLLECTOR_COMPOSE_FILE=compose/otel-collector.dev.yml
OTEL_COLLECTOR_CONF_FILE=./etc/otel-collector/otel-collector-config.dev.yml
OTEL_COLLECTOR_PUB_COMPOSE_FILE=compose/otel-collector-pub.yml

PROMETHEUS_COMPOSE_FILE=compose/prometheus.yml
PROMETHEUS_PUB_COMPOSE_FILE=compose/prometheus-pub.yml

JAEGER_COMPOSE_FILE=compose/jaeger.yml
JAEGER_PUB_COMPOSE_FILE=compose/jaeger-pub.yml
```

## Usage

By default the telemetry services are disabled, the `docker compose` will automatically start those services when `ENABLE_OPEN_TELEMETRY=true`.  Once the services are online, we can access these useful links for development and internal backoffice/monitoring operations:
* OTEL Collector metrics for Prometheus: http://localhost:8889/metrics
* Prometheus dashboard: http://$GRAPHISTRY_HOST:9091
* Jaeger dashboard: http://$GRAPHISTRY_HOST:16686

The waffle flag for OpenTelemetry is `flag_ot_traces` is off by default, normally you need to be admin in order to change its value, this flag controls at runtime which users can export telemetry data.
